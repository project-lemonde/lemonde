import type { InspectorContent } from "../../../types";
import { PbrBaseMaterialInspector } from "./pbrBaseMaterialInspector";

/**
 * The Physically based material of BJS.
 *
 * This offers the main features of a standard PBR material.
 * For more information, please refer to the documentation :
 * https://doc.babylonjs.com/features/featuresDeepDive/materials/using/introToPBR
 */
export const PbrMaterialInspector: readonly InspectorContent[] = [
    ...PbrBaseMaterialInspector,
    {
        name: "directIntensity",
        label: "Direct Intensity",
        type: "number",
        default: 1.0,
        category: "Lighting",
        description: "Intensity of the direct lights e.g. the four lights available in your scene.",
    },
    {
        name: "emissiveIntensity",
        label: "Emissive Intensity",
        type: "number",
        default: 1.0,
        category: "Lighting",
        description: "Intensity of the emissive part of the material.",
    },
    {
        name: "environmentIntensity",
        label: "Environment Intensity",
        type: "number",
        default: 1.0,
        category: "Lighting",
        description: "Intensity of the environment e.g. how much the environment will light the object either through harmonics for rough material or through the reflection for shiny ones.",
    },
    {
        name: "specularIntensity",
        label: "Specular Intensity",
        type: "number",
        default: 1.0,
        category: "Lighting",
        description: "This is a special control allowing the reduction of the specular highlights coming from the four lights of the scene. Those highlights may not be needed in full environment lighting.",
    },
    {
        name: "disableBumpMap",
        label: "Disable Bump Map",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Debug Control allowing disabling the bump map on this material.",
    },
    {
        name: "albedoTexture",
        label: "Albedo Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "AKA Diffuse Texture in standard nomenclature.",
    },
    {
        name: "ambientTexture",
        label: "Ambient Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "AKA Occlusion Texture in other nomenclature.",
    },
    {
        name: "ambientTextureStrength",
        label: "Ambient Texture Strength",
        type: "number",
        default: 1.0,
        category: "Textures",
        description: "AKA Occlusion Texture Intensity in other nomenclature.",
    },
    {
        name: "ambientTextureImpactOnAnalyticalLights",
        label: "Ambient Texture Impact On Analytical Lights",
        type: "number",
        default: 1.0,
        category: "Textures",
        description: "Defines how much the AO map is occluding the analytical lights (point spot...). 1 means it completely occludes it 0 mean it has no impact.",
    },
    {
        name: "opacityTexture",
        label: "Opacity Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Stores the alpha values in a texture. Use luminance if texture.getAlphaFromRGB is true.",
    },
    {
        name: "reflectionTexture",
        label: "Reflection Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Stores the reflection values in a texture.",
    },
    {
        name: "emissiveTexture",
        label: "Emissive Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Stores the emissive values in a texture.",
    },
    {
        name: "reflectivityTexture",
        label: "Reflectivity Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "AKA Specular texture in other nomenclature.",
    },
    {
        name: "metallicTexture",
        label: "Metallic Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Used to switch from specular/glossiness to metallic/roughness workflow.",
    },
    {
        name: "metallic",
        label: "Metallic",
        type: "number",
        default: null,
        category: "Textures",
        description: "Specifies the metallic scalar of the metallic/roughness workflow.",
    },
    {
        name: "roughness",
        label: "Roughness",
        type: "number",
        default: null,
        category: "Textures",
        description: "Specifies the roughness scalar of the metallic/roughness workflow.",
    },
    {
        name: "metallicF0Factor",
        label: "Metallic F0 Factor",
        type: "number",
        default: 1,
        category: "Textures",
        description: "In metallic workflow, specifies an F0 factor to help configuring the material F0.",
    },
    {
        name: "metallicReflectanceColor",
        label: "Metallic Reflectance Color",
        type: "color3",
        default: [1, 1, 1],
        category: "Textures",
        description: "In metallic workflow, specifies an F0 color.",
    },
    {
        name: "useOnlyMetallicFromMetallicReflectanceTexture",
        label: "Use Only Metallic From Metallic Reflectance Texture",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Specifies that only the A channel from metallicReflectanceTexture should be used. If false, both RGB and A channels will be used",
    },
    {
        name: "metallicReflectanceTexture",
        label: "Metallic Reflectance Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A This is multiplied against the scalar values defined in the material. If useOnlyMetallicFromMetallicReflectanceTexture is true, don't use the RGB channels, only A",
    },
    {
        name: "reflectanceTexture",
        label: "Reflectance Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Defines to store reflectanceColor in RGB This is multiplied against the scalar values defined in the material. If both reflectanceTexture and metallicReflectanceTexture textures are provided and useOnlyMetallicFromMetallicReflectanceTexture is false, metallicReflectanceTexture takes priority and reflectanceTexture is not used",
    },
    {
        name: "microSurfaceTexture",
        label: "Micro Surface Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Used to enable roughness/glossiness fetch from a separate channel depending on the current mode. Gray Scale represents roughness in metallic mode and glossiness in specular mode.",
    },
    {
        name: "bumpTexture",
        label: "Bump Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Stores surface normal data used to displace a mesh in a texture.",
    },
    {
        name: "lightmapTexture",
        label: "Lightmap Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Stores the pre-calculated light information of a mesh in a texture.",
    },
    {
        name: "refractionTexture",
        label: "Refraction Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Stores the refracted light information in a texture.",
    },
    {
        name: "ambientColor",
        label: "Ambient Color",
        type: "color3",
        default: [0, 0, 0],
        category: "Lighting",
        description: "The color of a material in ambient lighting.",
    },
    {
        name: "albedoColor",
        label: "Albedo Color",
        type: "color3",
        default: [1, 1, 1],
        category: "Lighting",
        description: "AKA Diffuse Color in other nomenclature.",
    },
    {
        name: "reflectivityColor",
        label: "Reflectivity Color",
        type: "color3",
        default: [1, 1, 1],
        category: "Lighting",
        description: "AKA Specular Color in other nomenclature.",
    },
    {
        name: "reflectionColor",
        label: "Reflection Color",
        type: "color3",
        default: [1, 1, 1],
        category: "Lighting",
        description: "The color reflected from the material.",
    },
    {
        name: "emissiveColor",
        label: "Emissive Color",
        type: "color3",
        default: [0, 0, 0],
        category: "Lighting",
        description: "The color emitted from the material.",
    },
    {
        name: "microSurface",
        label: "Micro Surface",
        type: "number",
        default: 1.0,
        category: "Textures",
        description: "AKA Glossiness in other nomenclature.",
    },
    {
        name: "indexOfRefraction",
        label: "Index Of Refraction",
        type: "number",
        category: "Textures",
        description: "Index of refraction of the material base layer. https://en.wikipedia.org/wiki/List_of_refractive_indices This does not only impact refraction but also the Base F0 of Dielectric Materials. From dielectric fresnel rules: F0 = square((iorT - iorI) / (iorT + iorI))",
    },
    {
        name: "invertRefractionY",
        label: "Invert Refraction Y",
        type: "boolean",
        category: "Textures",
        description: "Controls if refraction needs to be inverted on Y. This could be useful for procedural texture.",
    },
    {
        name: "linkRefractionWithTransparency",
        label: "Link Refraction With Transparency",
        type: "boolean",
        category: "Textures",
        description: "This parameters will make the material used its opacity to control how much it is refracting against not. Materials half opaque for instance using refraction could benefit from this control.",
    },
    {
        name: "useLightmapAsShadowmap",
        label: "Use Lightmap As Shadowmap",
        type: "boolean",
        category: "Textures",
        description: "If true, the light map contains occlusion information instead of lighting info.",
    },
    {
        name: "useAlphaFromAlbedoTexture",
        label: "Use Alpha From Albedo Texture",
        type: "boolean",
        category: "Textures",
        description: "Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.",
    },
    {
        name: "forceAlphaTest",
        label: "Force Alpha Test",
        type: "boolean",
        category: "Textures",
        description: "Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.",
    },
    {
        name: "alphaCutOff",
        label: "Alpha Cut Off",
        type: "number",
        default: 0.4,
        category: "Textures",
        description: "Defines the alpha limits in alpha test mode.",
    },
    {
        name: "useSpecularOverAlpha",
        label: "Use Specular Over Alpha",
        type: "boolean",
        default: true,
        category: "Textures",
        description: "Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones). A car glass is a good example of that. When sun reflects on it you can not see what is behind.",
    },
    {
        name: "useMicroSurfaceFromReflectivityMapAlpha",
        label: "Use Micro Surface From Reflectivity Map Alpha",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Specifies if the reflectivity texture contains the glossiness information in its alpha channel.",
    },
    {
        name: "useRoughnessFromMetallicTextureAlpha",
        label: "Use Roughness From Metallic Texture Alpha",
        type: "boolean",
        default: true,
        category: "Textures",
        description: "Specifies if the metallic texture contains the roughness information in its alpha channel.",
    },
    {
        name: "useRoughnessFromMetallicTextureGreen",
        label: "Use Roughness From Metallic Texture Green",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Specifies if the metallic texture contains the roughness information in its green channel. Needs useRoughnessFromMetallicTexture to be true",
    },
    {
        name: "useMetallnessFromMetallicTextureBlue",
        label: "Use Metallness From Metallic Texture Blue",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Specifies if the metallic texture contains the metallic information in its blue channel. Needs useRoughnessFromMetallicTexture to be true",
    },
    {
        name: "useAmbientOcclusionFromMetallicTextureRed",
        label: "Use Ambient Occlusion From Metallic Roughness Texture Red",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Specifies if the metallic texture contains the ambient occlusion information in its red channel.",
    },
    {
        name: "useAmbientInGrayScale",
        label: "Use Ambient In Gray Scale",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Specifies if the ambient texture contains the ambient occlusion information in its red channel only.",
    },
    {
        name: "useAutoMicroSurfaceFromReflectivityMap",
        label: "Use Auto Micro Surface From Reflectivity Map",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "In case the reflectivity map does not contain the microsurface information in its alpha channel, the material will try to infer what glossiness each pixel should be.",
    },
    {
        name: "usePhysicalLightFalloff",
        label: "Use Physical Light Falloff",
        type: "boolean",
        default: true,
        category: "Lighting",
        description: "BJS is using an hardcoded light falloff based on a manually sets up range. In PBR, one way to represents the falloff is to use the inverse squared root algorithm. This parameter can help you switch back to the BJS mode in order to create scenes using both materials.",
    },
    {
        name: "useGLTFLightFalloff",
        label: "Use GLTF Light Falloff",
        type: "boolean",
        default: false,
        category: "Lighting",
        description: "In order to support the falloff compatibility with gltf, a special mode has been added to reproduce the gltf light falloff.",
    },
    {
        name: "useRadianceOverAlpha",
        label: "Use Radiance Over Alpha",
        type: "boolean",
        default: true,
        category: "Misc",
        description: "Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones). A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.",
    },
    {
        name: "useObjectSpaceNormalMap",
        label: "Use Object Space Normal Map",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Allows using an object space normal map (instead of tangent space).",
    },
    {
        name: "useParallax",
        label: "Use Parallax",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Allows using the bump map in parallax mode.",
    },
    {
        name: "useParallaxOcclusion",
        label: "Use Parallax Occlusion",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Allows using the bump map in parallax occlusion mode.",
    },
    {
        name: "parallaxScaleBias",
        label: "Parallax Scale Bias",
        type: "number",
        default: 0.05,
        category: "Textures",
        description: "Controls the scale bias of the parallax mode.",
    },
    {
        name: "disableLighting",
        label: "Disable Lighting",
        type: "boolean",
        default: false,
        category: "Lighting",
        description: "If sets to true, disables all the lights affecting the material.",
    },
    {
        name: "forceIrradianceInFragment",
        label: "Force Irradiance In Fragment",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Force the shader to compute irradiance in the fragment shader in order to take bump in account.",
    },
    {
        name: "maxSimultaneousLights",
        label: "Max Simultaneous Lights",
        type: "number",
        default: 4,
        category: "Lighting",
        description: "Number of Simultaneous lights allowed on the material.",
    },
    {
        name: "invertNormalMapX",
        label: "Invert Normal Map X",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "If sets to true, x component of normal map value will invert (x = 1.0 - x).",
    },
    {
        name: "invertNormalMapY",
        label: "Invert Normal Map Y",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "If sets to true, y component of normal map value will invert (y = 1.0 - y).",
    },
    {
        name: "twoSidedLighting",
        label: "Two Sided Lighting",
        type: "boolean",
        default: false,
        category: "Lighting",
        description: "If sets to true and backfaceCulling is false, normals will be flipped on the backside.",
    },
    {
        name: "useAlphaFresnel",
        label: "Use Alpha Fresnel",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested. And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)",
    },
    {
        name: "useLinearAlphaFresnel",
        label: "Use Linear Alpha Fresnel",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested. And/Or occlude the blended part. (alpha stays linear to compute the fresnel)",
    },
    {
        name: "environmentBRDFTexture",
        label: "Environment BRDF Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Let user defines the brdf lookup texture used for IBL. A default 8bit version is embedded but you could point at : Default texture: https://assets.babylonjs.com/environments/correlatedMSBRDF_RGBD.png Default 16bit pixel depth texture: https://assets.babylonjs.com/environments/correlatedMSBRDF.dds LEGACY Default None correlated https://assets.babylonjs.com/environments/uncorrelatedBRDF_RGBD.png LEGACY Default None correlated 16bit pixel depth https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds",
    },
    {
        name: "forceNormalForward",
        label: "Force Normal Forward",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Force normal to face away from face.",
    },
    {
        name: "enableSpecularAntiAliasing",
        label: "Enable Specular Anti Aliasing",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Enables specular anti aliasing in the PBR shader. It will both interacts on the Geometry for analytical and IBL lighting. It also prefilter the roughness map based on the bump values.",
    },
    {
        name: "useHorizonOcclusion",
        label: "Use Horizon Occlusion",
        type: "boolean",
        default: true,
        category: "Textures",
        description: "This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal makes the reflect vector face the model (under horizon).",
    },
    {
        name: "useRadianceOcclusion",
        label: "Use Radiance Occlusion",
        type: "boolean",
        default: true,
        category: "Textures",
        description: "This parameters will enable/disable radiance occlusion by preventing the radiance to lit too much the area relying on ambient texture to define their ambient occlusion.",
    },
    {
        name: "unlit",
        label: "Unlit",
        type: "boolean",
        default: false,
        category: "Misc",
        description: "If set to true, no lighting calculations will be applied.",
    },
    {
        name: "applyDecalMapAfterDetailMap",
        label: "Apply Decal Map After Detail Map",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)",
    },
];
