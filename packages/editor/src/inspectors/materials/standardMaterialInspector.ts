import type { InspectorContent } from "../../types";
import { MaterialInspector } from "./materialInspector";

export const StandardMaterialInspector: readonly InspectorContent[] = [
    ...MaterialInspector,
    {
        name: "diffuseTexture",
        label: "Diffuse Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "The basic texture of the material as viewed under a light",
    },
    {
        name: "ambientTexture",
        label: "Ambient Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "AKA Occlusion Texture in other nomenclature, it helps adding baked shadows into your material",
    },
    {
        name: "opacityTexture",
        label: "Opacity Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: `Define the transparency of the material from a texture.
            The final alpha value can be read either from the red channel (if texture.getAlphaFromRGB is false)
            or from the luminance or the current texel (if texture.getAlphaFromRGB is true)`,
    },
    {
        name: "reflectionTexture",
        label: "Reflection Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Define the texture used to display the reflection",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions",
    },
    {
        name: "emissiveTexture",
        label: "Emissive Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Define texture of the material as if self lit",
    },
    {
        name: "specularTexture",
        label: "Specular Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Define how the color and intensity of the highlight given by the light in the material",
    },
    {
        name: "bumpTexture",
        label: "Bump Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: `Bump mapping is a technique to simulate bump and dents on a rendered surface.
            These are made by creating a normal map from an image. The means to do this can be found on the web, a search for 'normal map generator' will bring up free and paid for methods of doing this.`,
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#bump-map",
    },
    {
        name: "lightmapTexture",
        label: "Lightmap Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: `Complex lighting can be computationally expensive to compute at runtime.
            To save on computation, lightmaps may be used to store calculated lighting in a texture which will be applied to a given mesh`,
        link: "https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction#lightmaps",
    },
    {
        name: "refractionTexture",
        label: "Refraction Texture",
        type: "reference",
        referenceType: "BaseTexture",
        category: "Textures",
        description: "Define the texture used to display the refraction",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions",
    },
    {
        name: "ambientColor",
        label: "Ambient Color",
        type: "color3",
        default: [0, 0, 0],
        category: "Colors",
        description: "The color of the material lit by the environmental background lighting",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#ambient-color-example",
    },
    {
        name: "diffuseColor",
        label: "Diffuse Color",
        type: "color3",
        default: [1, 1, 1],
        category: "Colors",
        description: "The basic color of the material as viewed under a light",
    },
    {
        name: "specularColor",
        label: "Specular Color",
        type: "color3",
        default: [1, 1, 1],
        category: "Colors",
        description: "Define how the color and intensity of the highlight given by the light in the material",
    },
    {
        name: "emissiveColor",
        label: "Emissive Color",
        type: "color3",
        default: [0, 0, 0],
        category: "Colors",
        description: `Define the color of the material as if self lit
            This will be mixed in the final result even in the absence of light.`,
    },
    {
        name: "specularPower",
        label: "Specular Power",
        type: "number",
        default: 64,
        category: "Colors",
        description: `Defines how sharp are the highlights in the material.
            The bigger the value the sharper giving a more glossy feeling to the result.
            Reversely, the smaller the value the blurrier giving a more rough feeling to the result.`,
    },
    {
        name: "useAlphaFromDiffuseTexture",
        label: "Use Alpha From Diffuse Texture",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Does the transparency come from the diffuse texture alpha channel",
    },
    {
        name: "useEmissiveAsIllumination",
        label: "Use Emissive As Illumination",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "If true, the emissive value is added into the end result, otherwise it is multiplied in",
    },
    {
        name: "linkEmissiveWithDiffuse",
        label: "Link Emissive With Diffuse",
        type: "boolean",
        default: false,
        category: "Textures",
        description: `If true, some kind of energy conservation will prevent the end result to be more than 1 by reducing
            the emissive level when the final color is close to one`,
    },
    {
        name: "useSpecularOverAlpha",
        label: "Use Specular Over Alpha",
        type: "boolean",
        default: false,
        category: "Textures",
        description: `Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones).
            A car glass is a good exemple of that. When sun reflects on it you can not see what is behind`,
    },
    {
        name: "useReflectionOverAlpha",
        label: "Use Reflection Over Alpha",
        type: "boolean",
        default: false,
        category: "Textures",
        description: `Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).
            A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind`,
    },
    {
        name: "disableLighting",
        label: "Disable Lighting",
        type: "boolean",
        default: false,
        category: "Debug",
        description: `Does lights from the scene impacts this material.
            It can be a nice trick for performance to disable lighting on a fully emissive material`,
    },
    {
        name: "useObjectSpaceNormalMap",
        label: "Use Object Space Normal Map",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Allows using an object space normal map (instead of tangent space)",
    },
    {
        name: "useParallax",
        label: "Use Parallax",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "Is parallax enabled or not",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping",
    },
    {
        name: "useParallaxOcclusion",
        label: "Use Parallax Occlusion",
        type: "boolean",
        default: false,
        category: "Textures",
        description: `Is parallax occlusion enabled or not.
            If true, the outcome is way more realistic than traditional Parallax but you can expect a performance hit that worthes consideration`,
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping",
    },
    {
        name: "parallaxScaleBias",
        label: "Parallax Scale Bias",
        type: "number",
        default: 0.05,
        category: "Textures",
        description: `Apply a scaling factor that determine which "depth" the height map should reprensent.
            A value between 0.05 and 0.1`,
    },
    {
        name: "roughness",
        label: "Roughness",
        type: "number",
        default: 0,
        category: "Generic",
        description: "The roughness of the material",
    },
    {
        name: "indexOfRefraction",
        label: "Index Of Refraction",
        type: "number",
        default: 0.98,
        category: "Generic",
        description: "In case of refraction, define the value of the index of refraction",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions",
    },
    {
        name: "invertRefractionY",
        label: "Invert Refraction Y",
        type: "boolean",
        default: false,
        category: "Generic",
        description: `Invert the refraction texture alongside the y axis.
            It can be useful with procedural textures or probe for instance`,
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions",
    },
    {
        name: "alphaCutOff",
        label: "Alpha Cut Off",
        type: "number",
        default: 0.4,
        category: "Generic",
        description: "Defines the alpha limits in alpha test mode",
    },
    {
        name: "useLightmapAsShadowmap",
        label: "Use Lightmap As Shadowmap",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "In case of light mapping, define whether the map contains light or shadow informations.",
    },
    {
        name: "diffuseFresnelParameters",
        label: "Diffuse Fresnel Parameters",
        type: "reference",
        referenceType: "FresnelParameters",
        category: "Advanced",
        description: "Define the diffuse fresnel parameters of the material",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters",
    },
    {
        name: "opacityFresnelParameters",
        label: "Opacity Fresnel Parameters",
        type: "reference",
        referenceType: "FresnelParameters",
        category: "Advanced",
        description: "Define the opacity fresnel parameters of the material",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters",
    },
    {
        name: "reflectionFresnelParameters",
        label: "Reflection Fresnel Parameters",
        type: "reference",
        referenceType: "FresnelParameters",
        category: "Advanced",
        description: "Define the reflection fresnel parameters of the material",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters",
    },
    {
        name: "refractionFresnelParameters",
        label: "Refraction Fresnel Parameters",
        type: "reference",
        referenceType: "FresnelParameters",
        category: "Advanced",
        description: "Define the refraction fresnel parameters of the material",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters",
    },
    {
        name: "emissiveFresnelParameters",
        label: "Emissive Fresnel Parameters",
        type: "reference",
        referenceType: "FresnelParameters",
        category: "Advanced",
        description: "Define the emissive fresnel parameters of the material",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters",
    },
    {
        name: "useReflectionFresnelFromSpecular",
        label: "Use Reflection Fresnel From Specular",
        type: "boolean",
        default: false,
        category: "Advanced",
        description: `If true automatically deducts the fresnels values from the material specularity.
            It helps creating a material that is still shiny even with a completely black diffuse color.`,
        link: "https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters",
    },
    {
        name: "useGlossinessFromSpecularMapAlpha",
        label: "Use Glossiness From Specular Map Alpha",
        type: "boolean",
        default: false,
        category: "Advanced",
        description: "Defines if the glossiness/roughness of the material should be read from the specular map alpha channel",
    },
    {
        name: "maxSimultaneousLights",
        label: "Max Simultaneous Lights",
        type: "number",
        default: 4,
        category: "Misc",
        description: "Defines the maximum number of lights that can be used in the material",
    },
    {
        name: "invertNormalMapX",
        label: "Invert Normal Map X",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "If sets to true, x component of normal map value will invert (x = 1.0 - x)",
    },
    {
        name: "invertNormalMapY",
        label: "Invert Normal Map Y",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "If sets to true, y component of normal map value will invert (y = 1.0 - y)",
    },
    {
        name: "twoSidedLighting",
        label: "Two Sided Lighting",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "If sets to true and backfaceCulling is false, normals will be flipped on the backside.",
    },
    {
        name: "applyDecalMapAfterDetailMap",
        label: "Apply Decal Map After Detail Map",
        type: "boolean",
        default: false,
        category: "Textures",
        description: "If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)",
    },
    {
        name: "imageProcessingConfiguration",
        label: "Image Processing Configuration",
        type: "reference",
        referenceType: "ImageProcessingConfiguration",
        category: "Advanced",
        description: `Sets the Default image processing configuration used either in the this material.
            If sets to null, the scene one is in use.`,
    },
    {
        name: "prePassConfiguration",
        label: "Pre Pass Configuration",
        type: "reference",
        referenceType: "PrePassConfiguration",
        category: "Advanced",
        description: "Defines additional PrePass parameters for the material",
    },
    {
        name: "detailMap",
        label: "Detail Map",
        type: "reference",
        referenceType: "DetailMapConfiguration",
        category: "Textures",
        description: "The detail map of the material",
    },
    {
        name: "decalMap",
        label: "Decal Map",
        type: "reference",
        referenceType: "DecalMapConfiguration",
        category: "Textures",
        description: "The decal map of the material",
    },
];
