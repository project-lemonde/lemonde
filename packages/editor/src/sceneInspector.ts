export const SceneInspector = [
    {
        name: "autoClear",
        label: "Auto Clear",
        type: "boolean",
        default: true,
        category: "Misc",
        description: "Gets or sets a boolean that indicates if the scene must clear the render buffer before rendering a frame",
    },
    {
        name: "autoClearDepthAndStencil",
        label: "Auto Clear Depth And Stencil",
        type: "boolean",
        default: true,
        category: "Misc",
        description: "Gets or sets a boolean that indicates if the scene must clear the depth and stencil buffers before rendering a frame",
    },
    {
        name: "clearColor",
        label: "Clear Color",
        type: "color4",
        default: [0.2, 0.2, 0.3, 1.0],
        category: "Misc",
        description: "Defines the color used to clear the render buffer (Default is (0.2, 0.2, 0.3, 1.0))",
    },
    {
        name: "ambientColor",
        label: "Ambient Color",
        type: "color3",
        default: [0, 0, 0],
        category: "Misc",
        description: "Defines the color used to simulate the ambient color (Default is (0, 0, 0))",
    },
    {
        name: "environmentTexture",
        label: "Environment Texture",
        type: "texture",
        default: null,
        category: "Misc",
        description: `Texture used in all pbr material as the reflection texture.
            As in the majority of the scene they are the same (exception for multi room and so on),
            this is easier to reference from here than from all the materials.`,
    },
    {
        name: "environmentIntensity",
        label: "Environment Intensity",
        type: "number",
        default: 1,
        category: "Misc",
        description: `Intensity of the environment in all pbr material.
            This dims or reinforces the IBL lighting overall (reflection and diffuse).
            As in the majority of the scene they are the same (exception for multi room and so on),
            this is easier to reference from here than from all the materials.`,
    },
    // TODO: ImageProcessingConfiguration
    {
        name: "performancePriority",
        label: "Performance Priority",
        type: "enum",
        default: 0,
        category: "Misc",
        description: "Gets or sets a value indicating how to treat performance relatively to ease of use and backward compatibility",
        enum: [
            {
                label: "BackwardCompatible",
                description: "Default mode. No change. Performance will be treated as less important than backward compatibility",
                value: 0,
            },
            {
                label: "Intermediate",
                description: "Some performance options will be turned on trying to strike a balance between perf and ease of use",
                value: 1,
            },
            {
                label: "Aggressive",
                description: "Performance will be top priority",
                value: 2,
            },
        ],
    },
    {
        name: "forceWireframe",
        label: "Force Wireframe",
        type: "boolean",
        default: false,
        category: "Debug",
        description: "Gets or sets a boolean indicating if all rendering must be done in wireframe",
    },
    {
        name: "skipFrustumClipping",
        label: "Skip Frustum Clipping",
        type: "boolean",
        default: false,
        category: "Debug",
        description: "Gets or sets a boolean indicating if we should skip the frustum clipping part of the active meshes selection",
    },
    {
        name: "forcePointsCloud",
        label: "Force Points Cloud",
        type: "boolean",
        default: false,
        category: "Debug",
        description: "Gets or sets a boolean indicating if all rendering must be done in point cloud",
    },
    {
        name: "animationsEnabled",
        label: "Animations Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if animations are enabled",
    },
    {
        name: "useConstantAnimationDeltaTime",
        label: "Use Constant Animation Delta Time",
        type: "boolean",
        default: false,
        category: "Debug",
        description: `Gets or sets a boolean indicating if a constant deltatime has to be used
            This is mostly useful for testing purposes when you do not want the animations to scale with the framerate`,
    },
    {
        name: "constantlyUpdateMeshUnderPointer",
        label: "Constantly Update Mesh Under Pointer",
        type: "boolean",
        default: false,
        category: "Debug",
        description: `Gets or sets a boolean indicating if the scene must keep the meshUnderPointer property updated
            Please note that it requires to run a ray cast through the scene on every frame`,
    },
    {
        name: "hoverCursor",
        label: "Hover Cursor",
        type: "enum",
        default: "pointer",
        category: "Misc",
        description: "Defines the HTML cursor to use when hovering over interactive elements",
        enum: [
            {
                label: "pointer",
                value: "pointer",
            },
            {
                label: "auto",
                value: "auto",
            },
            {
                label: "default",
                value: "default",
            },
            {
                label: "none",
                value: "none",
            },
            {
                label: "context-menu",
                value: "context-menu",
            },
            {
                label: "help",
                value: "help",
            },
            {
                label: "pointer",
                value: "pointer",
            },
            {
                label: "progress",
                value: "progress",
            },
            {
                label: "wait",
                value: "wait",
            },
            {
                label: "cell",
                value: "cell",
            },
            {
                label: "crosshair",
                value: "crosshair",
            },
            {
                label: "text",
                value: "text",
            },
            {
                label: "vertical-text",
                value: "vertical-text",
            },
            {
                label: "alias",
                value: "alias",
            },
            {
                label: "copy",
                value: "copy",
            },
            {
                label: "move",
                value: "move",
            },
            {
                label: "no-drop",
                value: "no-drop",
            },
            {
                label: "not-allowed",
                value: "not-allowed",
            },
            {
                label: "grab",
                value: "grab",
            },
            {
                label: "grabbing",
                value: "grabbing",
            },
            {
                label: "e-resize",
                value: "e-resize",
            },
            {
                label: "n-resize",
                value: "n-resize",
            },
            {
                label: "ne-resize",
                value: "ne-resize",
            },
            {
                label: "nw-resize",
                value: "nw-resize",
            },
            {
                label: "s-resize",
                value: "s-resize",
            },
            {
                label: "se-resize",
                value: "se-resize",
            },
            {
                label: "sw-resize",
                value: "sw-resize",
            },
            {
                label: "w-resize",
                value: "w-resize",
            },
            {
                label: "ew-resize",
                value: "ew-resize",
            },
            {
                label: "ns-resize",
                value: "ns-resize",
            },
            {
                label: "nesw-resize",
                value: "nesw-resize",
            },
            {
                label: "nwse-resize",
                value: "nwse-resize",
            },
            {
                label: "col-resize",
                value: "col-resize",
            },
            {
                label: "row-resize",
                value: "row-resize",
            },
            {
                label: "all-scroll",
                value: "all-scroll",
            },
            {
                label: "zoom-in",
                value: "zoom-in",
            },
            {
                label: "zoom-out",
                value: "zoom-out",
            },
        ],
    },
    {
        name: "defaultCursor",
        label: "Default Cursor",
        type: "enum",
        default: "none",
        category: "Misc",
        description: "Defines the HTML default cursor to use (empty by default)",
        enum: [
            {
                label: "pointer",
                value: "pointer",
            },
            {
                label: "auto",
                value: "auto",
            },
            {
                label: "default",
                value: "default",
            },
            {
                label: "none",
                value: "none",
            },
            {
                label: "context-menu",
                value: "context-menu",
            },
            {
                label: "help",
                value: "help",
            },
            {
                label: "pointer",
                value: "pointer",
            },
            {
                label: "progress",
                value: "progress",
            },
            {
                label: "wait",
                value: "wait",
            },
            {
                label: "cell",
                value: "cell",
            },
            {
                label: "crosshair",
                value: "crosshair",
            },
            {
                label: "text",
                value: "text",
            },
            {
                label: "vertical-text",
                value: "vertical-text",
            },
            {
                label: "alias",
                value: "alias",
            },
            {
                label: "copy",
                value: "copy",
            },
            {
                label: "move",
                value: "move",
            },
            {
                label: "no-drop",
                value: "no-drop",
            },
            {
                label: "not-allowed",
                value: "not-allowed",
            },
            {
                label: "grab",
                value: "grab",
            },
            {
                label: "grabbing",
                value: "grabbing",
            },
            {
                label: "e-resize",
                value: "e-resize",
            },
            {
                label: "n-resize",
                value: "n-resize",
            },
            {
                label: "ne-resize",
                value: "ne-resize",
            },
            {
                label: "nw-resize",
                value: "nw-resize",
            },
            {
                label: "s-resize",
                value: "s-resize",
            },
            {
                label: "se-resize",
                value: "se-resize",
            },
            {
                label: "sw-resize",
                value: "sw-resize",
            },
            {
                label: "w-resize",
                value: "w-resize",
            },
            {
                label: "ew-resize",
                value: "ew-resize",
            },
            {
                label: "ns-resize",
                value: "ns-resize",
            },
            {
                label: "nesw-resize",
                value: "nesw-resize",
            },
            {
                label: "nwse-resize",
                value: "nwse-resize",
            },
            {
                label: "col-resize",
                value: "col-resize",
            },
            {
                label: "row-resize",
                value: "row-resize",
            },
            {
                label: "all-scroll",
                value: "all-scroll",
            },
            {
                label: "zoom-in",
                value: "zoom-in",
            },
            {
                label: "zoom-out",
                value: "zoom-out",
            },
        ],
    },
    {
        name: "doNotHandleCursors",
        label: "Do Not Handle Cursors",
        type: "boolean",
        default: false,
        category: "Misc",
        description: "Defines whether cursors are handled by the scene.",
    },
    {
        name: "preventDefaultOnPointerDown",
        label: "Prevent Default On Pointer Down",
        type: "boolean",
        default: true,
        category: "Misc",
        description: `This is used to call preventDefault() on pointer down
            in order to block unwanted artifacts like system double clicks`,
    },
    {
        name: "preventDefaultOnPointerUp",
        label: "Prevent Default On Pointer Up",
        type: "boolean",
        default: true,
        category: "Misc",
        description: `This is used to call preventDefault() on pointer up
            in order to block unwanted artifacts like system double clicks`,
    },
    {
        name: "metadata",
        label: "Metadata",
        type: "text",
        default: "",
        category: "Misc",
        description: "Gets or sets user defined metadata",
    },
    {
        name: "onDisposeObservable",
        label: "Dispose",
        type: "observable",
        category: "Events",
        description: "Observable raised when the scene is disposed",
    },
    {
        name: "onBeforeRenderObservable",
        label: "Before Render",
        type: "observable",
        category: "Events",
        description: "An event triggered before rendering the scene (right after animations and physics)",
    },
    {
        name: "onAfterRenderObservable",
        label: "After Render",
        type: "observable",
        category: "Events",
        description: "An event triggered after rendering the scene",
    },
    {
        name: "onAfterRenderCameraObservable",
        label: "After Render Camera",
        type: "observable",
        category: "Events",
        description: `An event triggered after rendering the scene for an active camera (When scene.render is called this will be called after each camera)
            This is triggered for each "sub" camera in a Camera Rig unlike onAfterCameraRenderObservable`,
    },
    {
        name: "onBeforeAnimationsObservable",
        label: "Before Animations",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered before animating the scene",
    },
    {
        name: "onAfterAnimationsObservable",
        label: "After Animations",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered after animations processing",
    },
    {
        name: "onBeforeDrawPhaseObservable",
        label: "Before Draw Phase",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered before draw calls are ready to be sent",
    },
    {
        name: "onAfterDrawPhaseObservable",
        label: "After Draw Phase",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered after draw calls have been sent",
    },
    {
        name: "onReadyObservable",
        label: "Ready",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered when the scene is ready",
    },
    {
        name: "onBeforeCameraRenderObservable",
        label: "Before Camera Render",
        type: "observable",
        observableType: "Camera",
        category: "Events",
        description: "An event triggered before rendering a camera",
    },
    {
        name: "onAfterCameraRenderObservable",
        label: "After Camera Render",
        type: "observable",
        observableType: "Camera",
        category: "Events",
        description: "An event triggered after rendering a camera. This is triggered for the full rig Camera only unlike onAfterRenderCameraObservable",
    },
    {
        name: "onBeforeActiveMeshesEvaluationObservable",
        label: "Before Active Meshes Evaluation",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered when active meshes evaluation is about to start",
    },
    {
        name: "onAfterActiveMeshesEvaluationObservable",
        label: "After Active Meshes Evaluation",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered when active meshes evaluation is done",
    },
    {
        name: "onBeforeParticlesRenderingObservable",
        label: "Before Particles Rendering",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered when particles rendering is about to start Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)",
    },
    {
        name: "onAfterParticlesRenderingObservable",
        label: "After Particles Rendering",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered when particles rendering is done Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)",
    },
    {
        name: "onDataLoadedObservable",
        label: "Data Loaded",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered when SceneLoader.Append or SceneLoader.Load or SceneLoader.ImportMesh were successfully executed",
    },
    {
        name: "onNewCameraAddedObservable",
        label: "New Camera Added",
        type: "observable",
        observableType: "Camera",
        category: "Events",
        description: "An event triggered when a camera is created",
    },
    {
        name: "onCameraRemovedObservable",
        label: "Camera Removed",
        type: "observable",
        observableType: "Camera",
        category: "Events",
        description: "An event triggered when a camera is removed",
    },
    {
        name: "onNewLightAddedObservable",
        label: "New Light Added",
        type: "observable",
        observableType: "Light",
        category: "Events",
        description: "An event triggered when a light is created",
    },
    {
        name: "onLightRemovedObservable",
        label: "Light Removed",
        type: "observable",
        observableType: "Light",
        category: "Events",
        description: "An event triggered when a light is removed",
    },
    {
        name: "onNewGeometryAddedObservable",
        label: "New Geometry Added",
        type: "observable",
        observableType: "Geometry",
        category: "Events",
        description: "An event triggered when a geometry is created",
    },
    {
        name: "onGeometryRemovedObservable",
        label: "Geometry Removed",
        type: "observable",
        observableType: "Geometry",
        category: "Events",
        description: "An event triggered when a geometry is removed",
    },
    {
        name: "onNewTransformNodeAddedObservable",
        label: "New Transform Node Added",
        type: "observable",
        observableType: "TransformNode",
        category: "Events",
        description: "An event triggered when a transform node is created",
    },
    {
        name: "onTransformNodeRemovedObservable",
        label: "Transform Node Removed",
        type: "observable",
        observableType: "TransformNode",
        category: "Events",
        description: "An event triggered when a transform node is removed",
    },
    {
        name: "onNewMeshAddedObservable",
        label: "New Mesh Added",
        type: "observable",
        observableType: "AbstractMesh",
        category: "Events",
        description: "An event triggered when a mesh is created",
    },
    {
        name: "onMeshRemovedObservable",
        label: "Mesh Removed",
        type: "observable",
        observableType: "AbstractMesh",
        category: "Events",
        description: "An event triggered when a mesh is removed",
    },
    {
        name: "onNewSkeletonAddedObservable",
        label: "New Skeleton Added",
        type: "observable",
        observableType: "Skeleton",
        category: "Events",
        description: "An event triggered when a skeleton is created",
    },
    {
        name: "onSkeletonRemovedObservable",
        label: "Skeleton Removed",
        type: "observable",
        observableType: "Skeleton",
        category: "Events",
        description: "An event triggered when a skeleton is removed",
    },
    {
        name: "onNewMaterialAddedObservable",
        label: "New Material Added",
        type: "observable",
        observableType: "Material",
        category: "Events",
        description: "An event triggered when a material is created",
    },
    {
        name: "onNewMultiMaterialAddedObservable",
        label: "New MultiMaterial Added",
        type: "observable",
        observableType: "MultiMaterial",
        category: "Events",
        description: "An event triggered when a multi material is created",
    },
    {
        name: "onMaterialRemovedObservable",
        label: "Material Removed",
        type: "observable",
        observableType: "Material",
        category: "Events",
        description: "An event triggered when a material is removed",
    },
    {
        name: "onMultiMaterialRemovedObservable",
        label: "Multi Material Removed",
        type: "observable",
        observableType: "MultiMaterial",
        category: "Events",
        description: "An event triggered when a multi material is removed",
    },
    {
        name: "onNewTextureAddedObservable",
        label: "New Texture Added",
        type: "observable",
        observableType: "BaseTexture",
        category: "Events",
        description: "An event triggered when a texture is created",
    },
    {
        name: "onTextureRemovedObservable",
        label: "Texture Removed",
        type: "observable",
        observableType: "BaseTexture",
        category: "Events",
        description: "An event triggered when a texture is removed",
    },
    {
        name: "onBeforeRenderTargetsRenderObservable",
        label: "Before Render Targets Render",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "Can happen multiple times per frame.",
    },
    {
        name: "onAfterRenderTargetsRenderObservable",
        label: "After Render Targets Render",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "Can happen multiple times per frame.",
    },
    {
        name: "onBeforeStepObservable",
        label: "Before Step",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered before calculating deterministic simulation step",
    },
    {
        name: "onAfterStepObservable",
        label: "After Step",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered after calculating deterministic simulation step",
    },
    {
        name: "onActiveCameraChanged",
        label: "Active Camera Changed",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered when the activeCamera property is updated",
    },
    {
        name: "onActiveCamerasChanged",
        label: "Active Cameras Changed",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "An event triggered when the activeCameras property is updated",
    },
    {
        name: "onBeforeRenderingGroupObservable",
        label: "Before Rendering Group",
        type: "observable",
        observableType: "RenderingGroupInfo",
        category: "Events",
        description: "This Observable will be triggered before rendering each renderingGroup of each rendered camera. The RenderingGroupInfo class contains all the information about the context in which the observable is called If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)",
    },
    {
        name: "onAfterRenderingGroupObservable",
        label: "After Rendering Group",
        type: "observable",
        observableType: "RenderingGroupInfo",
        category: "Events",
        description: "This Observable will be triggered after rendering each renderingGroup of each rendered camera. The RenderingGroupInfo class contains all the information about the context in which the observable is called If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)",
    },
    {
        name: "onMeshImportedObservable",
        label: "Mesh Imported",
        type: "observable",
        observableType: "AbstractMesh",
        category: "Events",
        description: "This Observable will when a mesh has been imported into the scene.",
    },
    {
        name: "onAnimationFileImportedObservable",
        label: "Animation File Imported",
        type: "observable",
        observableType: "Scene",
        category: "Events",
        description: "This Observable will when an animation file has been imported into the scene.",
    },
    // TODO: PointerPickingConfiguration
    {
        name: "onPrePointerObservable",
        label: "Pre Pointer",
        type: "observable",
        observableType: "PointerInfoPre",
        category: "Events",
        description: `This observable event is triggered when any ponter event is triggered. It is registered during Scene.attachControl() and it is called BEFORE the 3D engine process anything (mesh/sprite picking for instance).
            You have the possibility to skip the process and the call to onPointerObservable by setting PointerInfoPre.skipOnPointerObservable to true`,
    },
    {
        name: "onPointerObservable",
        label: "Pointer",
        type: "observable",
        observableType: "PointerInfo",
        category: "Events",
        description: "Observable event triggered each time an input event is received from the rendering canvas",
    },
    {
        name: "DragMovementThreshold",
        label: "Drag Movement Threshold",
        type: "number",
        default: 10,
        category: "Misc",
        description: "Gets or sets the distance in pixel that you have to move to prevent some events. Default is 10 pixels",
    },
    {
        name: "LongPressDelay",
        label: "Long Press Delay",
        type: "number",
        default: 500,
        category: "Misc",
        description: "Time in milliseconds to wait to raise long press events if button is still pressed. Default is 500 ms",
    },
    {
        name: "DoubleClickDelay",
        label: "Double Click Delay",
        type: "number",
        default: 300,
        category: "Misc",
        description: "Time in milliseconds to wait to raise long press events if button is still pressed. Default is 300 ms",
    },
    {
        name: "ExclusiveDoubleClickMode",
        label: "Exclusive Double Click Mode",
        type: "boolean",
        default: false,
        category: "Misc",
        description: "If you need to check double click without raising a single click at first click, enable this flag",
    },
    {
        name: "onPreKeyboardObservable",
        label: "Pre Keyboard",
        type: "observable",
        observableType: "KeyboardInfoPre",
        category: "Events",
        description: `This observable event is triggered when any keyboard event si raised and registered during Scene.attachControl()
            You have the possibility to skip the process and the call to onKeyboardObservable by setting KeyboardInfoPre.skipOnPointerObservable to true`,
    },
    {
        name: "onKeyboardObservable",
        label: "Keyboard",
        type: "observable",
        observableType: "KeyboardInfo",
        category: "Events",
        description: "Observable event triggered each time an keyboard event is received from the hosting window",
    },
    {
        name: "useRightHandedSystem",
        label: "Use Right Handed System",
        type: "boolean",
        default: false,
        category: "Misc",
        description: "Gets or sets a boolean indicating if the scene must use right-handed coordinates system",
    },
    {
        name: "fogEnabled",
        label: "Fog Enabled",
        type: "boolean",
        default: true,
        category: "Misc",
        description: "Gets or sets a boolean indicating if fog is enabled on this scene",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog",
    },
    {
        name: "fogMode",
        label: "Fog Mode",
        type: "enum",
        default: 0,
        category: "Misc",
        description: "Gets or sets the fog mode to use",
        enum: [
            {
                label: "None",
                description: "The fog is deactivated",
                value: 0,
            },
            {
                label: "Exp",
                description: "The fog density is following an exponential function",
                value: 1,
            },
            {
                label: "Exp2",
                description: "The fog density is following an exponential function faster than FOGMODE_EXP",
                value: 2,
            },
            {
                label: "Linear",
                description: "The fog density is following a linear function.",
                value: 3,
            },
        ],
        link: "https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog",
    },
    {
        name: "fogColor",
        label: "Fog Color",
        type: "color3",
        default: [0.2, 0.2, 0.3],
        category: "Misc",
        description: "Gets or sets the fog color to use",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog",
    },
    {
        name: "fogDensity",
        label: "Fog Density",
        type: "number",
        default: 0.1,
        category: "Misc",
        description: "Gets or sets the fog density to use",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog",
    },
    {
        name: "fogStart",
        label: "Fog Start",
        type: "number",
        default: 0.0,
        category: "Misc",
        description: "Gets or sets the fog start distance to use",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog",
    },
    {
        name: "fogEnd",
        label: "Fog End",
        type: "number",
        default: 1000.0,
        category: "Misc",
        description: "Gets or sets the fog end distance to use",
        link: "https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog",
    },
    {
        name: "shadowsEnabled",
        label: "Shadows Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if shadows are enabled on this scene",
    },
    {
        name: "lightsEnabled",
        label: "Lights Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if lights are enabled on this scene",
    },
    {
        name: "activeCamera",
        label: "Active Camera",
        type: "camera",
        default: null,
        category: "Misc",
        description: "Gets or sets the active camera",
    },
    {
        name: "defaultMaterial",
        label: "Default Material",
        type: "material",
        default: null,
        category: "Misc",
        description: "The default material used on meshes when no material is affected",
    },
    {
        name: "texturesEnabled",
        label: "Textures Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if textures are enabled on this scene",
    },
    {
        name: "physicsEnabled",
        label: "Physics Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if physics engine is enabled on this scene",
    },
    {
        name: "particlesEnabled",
        label: "Particles Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if particles are enabled on this scene",
    },
    {
        name: "spritesEnabled",
        label: "Sprites Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if sprites are enabled on this scene",
    },
    {
        name: "skeletonsEnabled",
        label: "Skeletons Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if skeletons are enabled on this scene",
    },
    {
        name: "lensFlaresEnabled",
        label: "Lens Flares Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if lens flares are enabled on this scene",
    },
    {
        name: "collisionsEnabled",
        label: "Collisions Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if collisions are enabled on this scene",
    },
    {
        name: "gravity",
        label: "Gravity",
        type: "vector3",
        default: [0, -9.807, 0],
        category: "Misc",
        description: "Defines the gravity applied to this scene (used only for collisions)",
    },
    {
        name: "postProcessesEnabled",
        label: "Post Processes Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if post processes are enabled on this scene",
    },
    // TODO: PostProcessManager
    {
        name: "renderTargetsEnabled",
        label: "Render Targets Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if render targets are enabled on this scene",
    },
    {
        name: "useDelayedTextureLoading",
        label: "Use Delayed Texture Loading",
        type: "boolean",
        default: false,
        category: "Misc",
        description: `Defines if texture loading must be delayed
            If true, textures will only be loaded when they need to be rendered`,
    },
    {
        name: "probesEnabled",
        label: "Probes Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if probes are enabled on this scene",
    },
    // TODO: offlineProvider
    {
        name: "procedualTexturesEnabled",
        label: "Procedual Textures Enabled",
        type: "boolean",
        default: true,
        category: "Debug",
        description: "Gets or sets a boolean indicating if procedural textures are enabled on this scene",
    },
    {
        name: "animationTimeScale",
        label: "Animation Time Scale",
        type: "number",
        default: 1,
        category: "Misc",
        description: "Gets or sets a general scale for animation speed",
        link: "https://www.babylonjs-playground.com/#IBU2W7#3",
    },
    {
        name: "requireLightSorting",
        label: "Require Light Sorting",
        type: "boolean",
        default: false,
        category: "Misc",
        description: `Gets or sets a boolean indicating if lights must be sorted by priority (off by default)
            This is useful if there are more lights that the maximum simulteanous authorized`,
    },
];
